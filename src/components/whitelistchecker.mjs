import { ethers } from 'ethers';
import { MerkleTree } from 'merkletreejs';
import { keccak256 } from "@ethersproject/keccak256";


const whitelist = [
"0x949f58353970Bf58E609dcde7b5fb63c29810812",
"0x1d54792a1efb64e7D56900Ca45Cb0DBd314F6094",
"0xc445B4268D41293F986De7d276186e2d3AFBA543",
"0x77A3E9BCE11aE2fE0caA9f0c56c54bB26BEd7788",
"0xA81f3E69f3c0389e6b707473c21B13Fbe1D79586",
"0x7fAdBF91f9Ea7E66a65578e449a9Ce7538ef5f6f",
"0xB71448fDDB5954B21e41Fb3f656510F65BdcaFe1",
"0x96eCAC303C4C208DDC9C4438f295908A59447D3F",
"0xD5CD998e0268e0C5E8Ba7736781C6E1494FCc07d",
"0x8f0CC75a9e7560A986f07445325076fa310FC3fc",
"0x40D191A61F23162ec57F0E723284947fbf03f8f7",
"0x4FD4A4F5FA864e85c968014f3391F9Ea7d458FCb",
"0xBa0BaC65101957b4cEF3307Fc57E6160a5666678",
"0x5464cDeAB1a4DCa805D16FD507004077D75Cae49",
"0x8d61bf160b3d2412bfb54dd2d1377a700913fffe",
"0x5D84e65398466a713D12a66eC8593635D8C617bE",
"0xeedcC4D7d9ea1C9c1d1944717a1dFc73663d7D45",
"0xB47Fb9b402a045CF02E0273479061485173672cE",
"0xa410f1Eb8b55f711a856B2bEaeb2154e609A817E",
"0xb39a6B4cb933AAB3c30dA765aCF26c4C00a4bF11",
"0xAB09077FEEF6Ccd22b029A8718158F491566B902",
"0xBb38CCc4E77D13A75851AbA5ee11fda7a550a275",
"0x67B13ABB73C550deB0f0fC27e71Fb02856b104a6",
"0x3AD718BFaCD1f035d3940C6F556E2C6cF2Eff7b4",
"0xf0B39EC15b14eedAd1d1c8e58a671E8422c81942",
"0x840C4E60cf729C505AEa124D6525bBEEA441d67a",
"0xb1E079854268985431935ce53AA54C8e1722fA0D",
"0x9B6d9D1fB37b01c028a851a33691Cac891cd60A1",
"0x7cdfda2f035d702f620fa7247020ff1d72d83a9a",
"0xC4C68a91CBe93b97575e2F65F5De083CC0246b49",
"0xF9cF042f63fC1379387D4E06340AeDf8afe56Ca2",
"0x7B2d7D20d44936ebF748885Aded329D9a309A035",
"0x9e0750442b62704e75a999433fc31e27f53d6b0d",
"0x600809c1DeADAC916B8d7354572699DBaD1A7020",
"0xd3794aE340CEB5622C5bb2B42729b0fF47b32E91",
"0x0402645237095c77d68d9722a6Db1E58c0d8191F",
"0xe121F2Eac2F844020d4E91F677728adBCa9985A6",
"0x5b1740ec44Bd7e60Edc9916BeF3407B50c73422D",
"0xE1f88B0482Bf32643476cF9c01Ac63441E783593",
"0x5514940361a84f0eeBA1008593b6245Bc202F3Ff",
"0x890A7fD44a71048D299D1819C1A77ec4Fc8ad2C7",
"0xB95C88262f6632e4b7C94432B6A360C19e642E10",
"0xb5E3cee62a5D46e15d520b6b3596Dd4C8C079307",
"0xc8E83045867D80A5e2f7080Bf6755D1A5d630702",
"0x90870452bb743dc950c5239CAF511327AC96f481",
"0x84c64454037eFf681dBDBf66C78Ca24B0e1980Ea",
"0x17449FCe6d9D8f3703D94D7FCC36F0b235895627",
"0x3a2851561Ab6688ec4Af5F6358443f1759Bbd03F",
"0xA68d467BE8dC8C70aeF1765A8325762350Ca4b69",
"0xD86fe136302bD6092d30B50e247774d41D26d949",
"0x9a0F770D71e043BCD42AcA26a1d916cf28b886B6",
"0xb3e3062339f75E1055045afD15eB8d59D922b65b",
"0x78f4738401267dec5b95928cBADaE886ae750A80",
"0x0Bdf6635B972FBdd6b727006b08b3c7F8A0fF3d6",
"0x93fe6ffE36790618cDcaC2f7e57d186315d77983",
"0x649e186EFCA119b26806e0bB37065E7725914F2e",
"0x83E7322328d902940c490634396860d875E448C2",
"0x95A200E2ee1Fa78557a8D0256fa22A25Fc8d4D0F",
"0x80f6391F15D77fD4051685121ea3BcC2cEc8959c",
"0x987a55e2Fa8Cae74AC03fA957E5a09BD6d7A2b5c",
"0x8E283C0907c76D7ABd153f40ec8b7FEB4afB93Fe",
"0x2c8b7d83ae85ab6905b2b2b7adf1d937363e4f4b",
"0x9DDcF6c28d02DbaD0C14b964565Bb3F990704273",
"0x17B3890f25016F7E43a1fA1D1AeedeF42e5eCD4B",
"0xaC52E8647f2b31f108ce24ECE00fB71f84BE5e71",
"0x117972f869f12fd5Bd31622eEB12e166ACAfB6c8",
"0xC7497285513467eEa5BCB11e37612DCFe0413D55",
"0x1486fFfC6f4502A6ED43343B2dc9c870735A9BB7",
"0x1d842Fa7B6E657Ec7AA31Af4D1c0D6bCD2336dfe",
"0x02dc1757c57e414a93aa201506430bd95ebe7428",
"0x1122Dd10264Bfdc961e4831167783200249564fc",
"0x358FD9C96D9d84D53A919F88Db377573E1D4da82",
"0x7BFF7315006D684F58CFFbD99D5147280dfecd64",
"0x983409AC03B6B5DFD45f895579251aae370ba1D3",
"0x69Be0CeC138d7195e46393b276f3391D80A2095d",
"0xBE785fE0817a200ae06b64EC8CA85286f3113e68",
"0x3F2851D17d37F0300EBf463da6D7c0a9eCFAab78",
]
const leafNodes = whitelist.map(addr => keccak256(addr));
const merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true });


export async function getRootHash() {

    const rootHash = merkleTree.getRoot();
    console.log('Whitelist Merkle Tree\n', merkleTree.toString());
    console.log("Root Hash: ", rootHash);
}

export function getProof(userAddress) {
    const claimingAddress = keccak256(userAddress);

    const hexProof = merkleTree.getHexProof(claimingAddress);
    return hexProof;

}

export async function checkWhitelist(userAddress) {


    const claimingAddress = keccak256(userAddress);
    const hexProof = merkleTree.getHexProof(claimingAddress);
    const rootHash = merkleTree.getRoot();

    const isWhitelisted = merkleTree.verify(hexProof, claimingAddress, rootHash);
    return isWhitelisted;
}


console.log(getRootHash())